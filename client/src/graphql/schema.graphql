"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Auth {
  accessToken: String
}

type Bookmark {
  id: ID!
  question: Question
  user: User
  createdAt: String
}

type Comment {
  id: ID!
  questionId: Int
  createdAt: String
  uid: String
  content: String
  like: [String]
  dislike: [String]
  subComments: [SubComment]
}

type Mutation {
  vote(questionId: Int!, userId: String!, kind: String!): QuestionVoteResult
  login(code: String!): Auth!
  logout(accessToken: String!): Boolean
  addComment(questionId: Int, uid: String, content: String): Comment
  toggleLike(commentId: String, uid: String): Comment
  addBookmark(userId: Int, questionId: Int): Bookmark
  removeBookmark(bookmarkId: Int!): Bookmark
}

type Query {
  allQuestionCategories: [QuestionCategory!]!
  allQuestions: [Question!]!
  questionDetail(questionId: Int!): Question
  questionsByCategoryId(categoryId: String!): [Question!]!
  allUsers: [User!]!
  userInfo(userId: String!): User
  myInfo(accessToken: String!): User
  comments(questionId: Int): [Comment!]!
  bookmarks(userId: Int!): [Bookmark]
}

type Question {
  id: ID!
  content: String!
  categoryId: String!
  category: QuestionCategory!
  votes: [QuestionVote!]!
  authorId: String!
  author: QuestionAuthor!
  comments: [Comment!]!
  informations: [String!]!
}

type QuestionAuthor {
  id: String!
  name: String!
  gitHubURL: String!
  profileImageURL: String!
}

type QuestionCategory {
  id: ID!
  title: String!
}

type QuestionVote {
  userId: String!
  kind: String!
}

type QuestionVoteResult {
  easy: Int!
  normal: Int!
  hard: Int!
}

type SubComment {
  id: ID!
  createdAt: String
  uid: String
  content: String
  like: [String]
  dislike: [String]
}

type User {
  id: ID!
  name: String!
  gitHubURL: String!
  profileImageURL: String!
}

